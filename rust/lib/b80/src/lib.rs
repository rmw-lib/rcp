pub const CHAR: [char; 80] = [
  '!', '$', '(', ')', '+', ',', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ';', '=',
  '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
  'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f',
  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
  'z', '{', '}', '~',
];

pub const DECODE: [u8; 256] = [
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 255, 1, 255, 255,
  255, 2, 3, 255, 4, 5, 6, 255, 255, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255, 17, 255, 18, 255,
  255, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
  42, 43, 44, 45, 46, 255, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
  65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 255, 78, 79, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255,
];

pub fn encode(buf: impl AsRef<[u8]>) -> String {
  let buf = buf.as_ref();
  let r = base_encode::encode(buf, 80);
  let mut s = String::with_capacity(r.len());
  r.iter().for_each(|i| s.push(CHAR[*i as usize]));
  s
}

pub fn decode(encoded: impl AsRef<str>) -> Vec<u8> {
  let encoded = encoded.as_ref();
  let mut buf = Vec::with_capacity(encoded.len());
  for i in encoded.chars() {
    let i = DECODE[i as usize];

    if i != 255 {
      buf.push(i);
    }
  }
  base_encode::decode(&buf, 80).unwrap()
}

#[cfg(test)]
mod tests {
  use crate::{decode, encode};
  #[test]
  fn b80() {
    for _ in 0..100 {
      let bin: [u8; 32] = rand::random();
      assert_eq!(decode(encode(bin)), bin);
    }
  }
}
